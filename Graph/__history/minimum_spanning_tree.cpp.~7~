//---------------------------------------------------------------------------

#include <vcl.h>
#pragma hdrstop

#include "minimum_spanning_tree.h"
//---------------------------------------------------------------------------
#pragma package(smart_init)
#pragma resource "*.dfm"
TForm1 *Form1;
//---------------------------------------------------------------------------
__fastcall TForm1::TForm1(TComponent* Owner)
	: TForm(Owner)
{
}
//---------------------------------------------------------------------------
void __fastcall TForm1::Button1Click(TObject *Sender)
{
	int NUMBER_OF_VECTOR = StrToInt(num_of_vector->Text);
	int RANGE = StrToInt(rng_of_weight->Text);
	int THRESHOLD = StrToInt(threshold->Text);
	int MAX = 99999;

	// Dynamically allocate adjacent matrix array
	int** GRAPH = new int*[NUMBER_OF_VECTOR];
	for(int i=0;i<NUMBER_OF_VECTOR;i++)
	{
		GRAPH[i] = new int[NUMBER_OF_VECTOR];
	}

	// Generate Matrix
	for(int row=0;row<NUMBER_OF_VECTOR;row++)
	{
		for(int col=row;col<NUMBER_OF_VECTOR;col++)
		{
			if(col==row) GRAPH[row][col]=MAX;
			else{
				int rnd = rand()%(RANGE+1);
                if(rnd>THRESHOLD) rnd = MAX;
				GRAPH[row][col] = rnd;
				GRAPH[col][row] = rnd;
			}

		}
	}

	// Set up String Grid
	StringGrid1->RowCount = NUMBER_OF_VECTOR;
	StringGrid1->ColCount = NUMBER_OF_VECTOR;

	// Draw Matrix to String Grid
	for(int row=0;row<NUMBER_OF_VECTOR;row++)
	{
		for(int col=0;col<NUMBER_OF_VECTOR;col++)
		{
			StringGrid1->Cells[col][row] = IntToStr(GRAPH[row][col]);
		}
	}

	// Dynamically allocate adjacent list array
	int N_EDGES = 0;
	for(int row=0;row<NUMBER_OF_VECTOR;row++)
	{
		for(int col=row+1;col<NUMBER_OF_VECTOR;col++)
		{
			if(GRAPH[row][col]<MAX) N_EDGES++;
		}
	}
	int **EDGE = new int*[N_EDGES+1]; // starting from 1
	for(int i=0;i<=N_EDGES;i++)
	{
		EDGE[i] = new int[3];
	}

	int *used = new int[N_EDGES+1];
	int *mask = new int[NUMBER_OF_VECTOR];
	int *mst = new int[NUMBER_OF_VECTOR];

	int edge_index = 0;
	for(int row=0;row<NUMBER_OF_VECTOR;row++)
	{
		for(int col=row+1;col<NUMBER_OF_VECTOR;col++)
		{
			if(GRAPH[row][col]<MAX)
			{
				EDGE[++edge_index][0] = row;
				EDGE[edge_index][1] = col;
				EDGE[edge_index][2] = GRAPH[row][col];
			}
		}
	}
	EDGE[0][2] = MAX; // 小吾小用

	// Initialise Used, Mask and mst
	for(int i=1;i<N_EDGES;i++) used[i] = 0;
	for(int i=0;i<NUMBER_OF_VECTOR;i++)
	{
		mask[i] = i;
		mst[i] = -1;
	}

	// Draw List to Sting Grid
	StringGrid2->RowCount = N_EDGES;
	StringGrid2->ColCount = 3;
	for(int row=1;row<=N_EDGES;row++)
	{
		for(int col=0;col<3;col++)
		{
			StringGrid2->Cells[col][row] = EDGE[row][col];
        }
    }



}
//---------------------------------------------------------------------------





